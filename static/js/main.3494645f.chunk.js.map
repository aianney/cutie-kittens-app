{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/searh-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monsters","id","name","email","CardList","map","SearhBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+TAEaA,EAAO,SAACC,GAAD,OACnB,sBAAKC,UAAU,iBAAf,UACC,qBACCC,IAAI,WACJC,IAAG,+BAA0BH,EAAMI,SAASC,GAAzC,4BAEJ,6BAAKL,EAAMI,SAASE,OACd,4BAAKN,EAAMI,SAASG,YCNfC,G,MAAW,SAACR,GAAD,OACvB,qBAAKC,UAAU,YAAf,SACED,EAAMI,SAASK,KAAI,SAACL,GAAD,OACnB,cAAC,EAAD,CAAwBA,SAAUA,GAAvBA,EAASC,WCJVK,G,MAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBACCX,UAAU,SACVY,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCoCGG,G,wDApCd,aAAe,IAAD,8BACb,gBAaDH,aAAe,SAACI,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACZjB,SAAU,GACVc,YAAa,IAJD,E,qDAQd,WAAqB,IAAD,OACnBI,MAAM,8CACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEb,SAAUsB,S,oBAO7C,WAAU,IAAD,EAC0BC,KAAKN,MAA/BjB,EADA,EACAA,SAAUc,EADV,EACUA,YACZU,EAAmBxB,EAASyB,QAAO,SAACzB,GAAD,OACxCA,EAASE,KAAKwB,cAAcC,SAASb,EAAYc,wBAElD,OACC,sBAAK/B,UAAU,MAAf,UACC,+CACA,cAAC,EAAD,CACCU,YAAY,iBACZC,aAAce,KAAKf,eAEpB,cAAC,EAAD,CAAUR,SAAUwB,W,GA/BNK,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3494645f.chunk.js","sourcesContent":["import \"./card.styles.css\";\n\nexport const Card = (props) => (\n\t<div className=\"card-container\">\n\t\t<img\n\t\t\talt=\"monsters\"\n\t\t\tsrc={`https://robohash.org/${props.monsters.id}?set=set4&size=180x180`}\n\t\t/>\n\t\t<h2>{props.monsters.name}</h2>\n        <p>{ props.monsters.email}</p>\n\t</div>\n);\n","import { Card } from \"../card/card.component\";\nimport \"./card-list.styles.css\";\n\nexport const CardList = (props) => (\n\t<div className=\"card-list\">\n\t\t{props.monsters.map((monsters) => (\n\t\t\t<Card key={monsters.id} monsters={monsters}/>\n\t\t))}\n\t</div>\n);\n","import \"./search-box.styles.css\";\n\nexport const SearhBox = ({ placeholder, handleChange }) => (\n\t<input\n\t\tclassName=\"search\"\n\t\ttype=\"search\"\n\t\tplaceholder={placeholder}\n\t\tonChange={handleChange}\n\t/>\n);\n","import { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearhBox } from \"./components/search-box/searh-box.component\";\n\nimport './App.css';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tmonsters: [],\n\t\t\tsearchField: \"\",\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\n\t\t\t.then((response) => response.json())\n\t\t\t.then((users) => this.setState({ monsters: users }));\n\t}\n\n\thandleChange = (e) => {\n\t\tthis.setState({ searchField: e.target.value });\n\t}\n\n\trender() {\n\t\tconst { monsters, searchField } = this.state;\n\t\tconst filteredMonsters = monsters.filter((monsters) =>\n\t\t\tmonsters.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n\t\t);\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Cutie Kittens</h1>\n\t\t\t\t<SearhBox\n\t\t\t\t\tplaceholder=\"search kittens\"\n\t\t\t\t\thandleChange={this.handleChange}\n\t\t\t\t/>\n\t\t\t\t<CardList monsters={filteredMonsters}></CardList>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}